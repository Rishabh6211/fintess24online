{"version":3,"sources":["webpack:///./src/app/auth/reset-password/reset-password.module.ts","webpack:///./src/app/auth/services/login.service.ts?6b74","webpack:///./src/app/auth/reset-password/reset-password.component.ts","webpack:///./src/app/auth/reset-password/equal-validator.directive.ts","webpack:///./src/app/auth/reset-password/resetpassword-routing.module.ts","webpack:///./src/app/auth/reset-password/reset-password.component.css","webpack:///./src/app/auth/reset-password/reset-password.component.html"],"names":[],"mappings":"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","file":"4.chunk.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { resetPasswordRoutingModule } from './resetpassword-routing.module';\nimport { SharedModule } from '../../shared/shared.module';\nimport { MaterializeModule } from \"angular2-materialize\";\nimport { CustomFormsModule } from 'ng2-validation'\nimport { LoginService } from '../services/login.service';\nimport { FormsModule }   from '@angular/forms';\nimport { ResetPasswordComponent } from './reset-password.component';\nimport { EqualValidator } from './equal-validator.directive';\n@NgModule({\n  imports: [\n    CommonModule,\n    resetPasswordRoutingModule,\n    SharedModule,\n    CustomFormsModule,\n    FormsModule,\n    MaterializeModule\n  ],\n  declarations: [ResetPasswordComponent,EqualValidator]\n})\nexport class ResetPasswordModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/auth/reset-password/reset-password.module.ts","import { Injectable } from '@angular/core';\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\nimport 'rxjs/add/operator/map'\n\nimport tsConstants = require('../../shared/config/tsconstant');\nimport { SharedService } from '../../shared/services/shared.service';\n@Injectable()\nexport class LoginService {\n    \n    private _host = tsConstants.HOST;\n\n\tconstructor( private _http: Http, private _sharedService: SharedService ) { }\n\n    public login( user ) {\n\n    \tlet headers           = new Headers();\n        \n        let email:string   = user.email;\n        let password:string   = user.password;\n        \n        headers.append('Content-Type', 'application/json');\n\n        let body = {\n            'email': email,\n            'password': password,            \n            \n        }\n\n        return this._http.post(this._host +'/auth/login', body, { headers: headers }).map((res:Response) => res.json())\n    }\n    forgotPassword(emailID) {\n\n       let headers        = new Headers();\n       let email:string   = emailID;\n        \n       return this._http.post(this._host +'/userForgotPassword', {email : email}, { headers: headers }).map((res:Response) => res.json())\n   }\n   resetPassword(user, userID){\n     console.log(\"user\",user);\n        // userID  = this._sharedService.getCurrentUserID();\n        console.log( userID )\n\n        let headers                 = new Headers();\n        \n        let newPassword:string      = user.newPassword;\n        let confirmPassword:string  = user.confirmPassword;\n\n         headers.append('Content-Type', 'application/json');\n\n        let body = {\n            'newPassword': newPassword,\n            'confirmPassword': confirmPassword                       \n        }\n        console.log(\"body\",body);\n        return this._http.post(this._host +'/changepassword/'+userID, body, { headers: headers }).map((res:Response) => res.json())\n \n\n   }\n    \n}/* class ends. */\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/auth/services/login.service.ts","import { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\nimport { AuthService } from \"angular2-social-login\";\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ChangeDetectorRef } from '@angular/core';\n\nimport { LoginService } from '../services/login.service';\nimport { CookieService } from 'ngx-cookie';\nimport { FlashMessagesService } from 'ngx-flash-messages';\n\nimport {MaterializeDirective, MaterializeAction} from \"angular2-materialize\";\nimport * as Materialize from \"angular2-materialize\";\n\nimport tsConstants = require('../../shared/config/tsconstant');\n\n\n\nimport { SharedService } from '../../shared/services/shared.service';\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.css'],\n  providers: [LoginService]  \n})\nexport class ResetPasswordComponent implements OnInit {\n  public emailID = '';\n  public user = {\n           newPassword:\"\",\n           confirmPassword:\"\",\n  };\n  public userID = '';\n  public isloading: boolean   = false;\n  public errMessage: string = '';\n  public successMessage: string = '';\n \n\n  constructor(private _auth: AuthService, \n                private _loginService: LoginService,\n                private _router : Router,\n                private _cookieService: CookieService,\n                private _cd: ChangeDetectorRef,\n                private _flashMessagesService: FlashMessagesService,\n                private _sharedService: SharedService,\n                private _activateRouter:ActivatedRoute) {\n\n\t\t\t\t\n  }\n\n  ngOnInit() {\n        \n        this.userID = this._activateRouter.snapshot.params['id'];\n        console.log(this.userID)\n\n       \n  \t} \n\n  submit() {\n        this.isloading     = true;\n       \tthis.errMessage    = '';        \n        this._loginService.resetPassword(this.user,this.userID).subscribe(res => {\n           this.isloading = false;\n           if(res.success) {\n             this._sharedService.showToast(\"your_password_has_been_change\", tsConstants.COLOR_SUCESS);\n               this._router.navigate(['/login']); \n               //this.successMessage = res.;\n           } else {\n              this._sharedService.showToast(\"an_error_occured_please_try_again\", tsConstants.COLOR_DANGER);\n\n               //this.errMessage     = \"invalid\";\n           }\n       },err => {      \n           this.isloading = false;\n           //this.errMessage    = \"NO SUCH USER EXIST\";    \n       });\n    }\n    \n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/auth/reset-password/reset-password.component.ts","import { Directive, forwardRef, Attribute } from '@angular/core';\nimport { Validator, AbstractControl, NG_VALIDATORS } from '@angular/forms';\n\n@Directive({\n    selector: '[validateEqual][formControlName],[validateEqual][formControl],[validateEqual][ngModel]',\n    providers: [\n        { provide: NG_VALIDATORS, useExisting: forwardRef(() => EqualValidator), multi: true }\n    ]\n})\nexport class EqualValidator implements Validator {\n    constructor( @Attribute('validateEqual') public validateEqual: string,\n        @Attribute('reverse') public reverse: string) {\n\n    }\n\n    private get isReverse() {\n        if (!this.reverse) return false;\n        return this.reverse === 'true' ? true: false;\n    }\n\n    validate(c: AbstractControl): { [key: string]: any } {\n        // self value\n        let v = c.value;\n\n        // control vlaue\n        let e = c.root.get(this.validateEqual);\n\n        // value not equal\n        if (e && v !== e.value && !this.isReverse) {\n          return {\n            validateEqual: false\n          }\n        }\n\n        // value equal and reverse\n        if (e && v === e.value && this.isReverse) {\n            delete e.errors['validateEqual'];\n            if (!Object.keys(e.errors).length) e.setErrors(null);\n        }\n\n        // value not equal and reverse\n        if (e && v !== e.value && this.isReverse) {\n            e.setErrors({\n                validateEqual: false\n            })\n        }\n\n        return null;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/auth/reset-password/equal-validator.directive.ts","import { NgModule } from '@angular/core';\nimport { Routes,RouterModule } from '@angular/router';\n\nimport { ResetPasswordComponent } from './reset-password.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ResetPasswordComponent,\n    data: {\n      title: 'reset-password'\n    }\n  }  \n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class resetPasswordRoutingModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/auth/reset-password/resetpassword-routing.module.ts","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/auth/reset-password/reset-password.component.css\n// module id = 1504\n// module chunks = 4","module.exports = \"<app-loader [isloading]=\\\"isloading\\\"></app-loader>\\n<!-- <app-header [isloading]=\\\"isloading\\\"></app-header> -->\\n<!-- small banner-->\\n<breadcrumb [id]=\\\"'banner-crop'\\\" [class]=\\\"''\\\" [page]=\\\"'login'\\\"></breadcrumb>\\n<!-- small banner-->\\n\\n<!--Main layout-->\\n<main>\\n    <div class=\\\"container-fluid\\\">\\n\\n        <!-- loginbox-->\\n        <div class=\\\"loginbox my-2\\\">\\n\\n            <!--Form without header-->\\n\\n            <div class=\\\"text-center\\\">\\n                <h2>reset_password</h2>\\n            </div>\\n\\n            <div class=\\\"card\\\">\\n\\n                <!--Header-->\\n\\n                <div class=\\\"card-block\\\">\\n                    <!-- <div class=\\\"error-block\\\" *ngIf=\\\"isError\\\">\\n                        <p class=\\\"text-danger text-center\\\">\\n                            {{errMessage}}\\n                        </p>\\n                    </div>\\n                    <div class=\\\"error-block\\\" *ngIf=\\\"isSuccess\\\">\\n                        <p class=\\\"text-success text-center\\\">\\n                            {{errMessage}}\\n                        </p>\\n                    </div> -->\\n                    <form role=\\\"form\\\" #loginForm=\\\"ngForm\\\" (ngSubmit)=\\\"submit()\\\">\\n                        <!--Body-->\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-md-12\\\">\\n                                <div class=\\\"md-form has-required\\\">\\n                                    <i class=\\\"fa fa-lock prefix\\\"></i>\\n                                    <label for=\\\"password\\\">password</label>\\n                                    <input type=\\\"password\\\" id=\\\"password\\\" name=\\\"password\\\" class=\\\"form-control\\\" #password=\\\"ngModel\\\" [(ngModel)]=\\\"user.newPassword\\\" minlength=\\\"8\\\" required>\\n                                    <div class=\\\"error-block\\\">\\n                                        <small *ngIf=\\\"password.errors?.required && password.touched\\\" class=\\\"text-danger\\\">\\n                                            password_is_required\\n                                        </small>\\n                                        <small *ngIf=\\\"password.errors?.minlength && password.touched\\\" class=\\\"text-danger\\\">\\n                                           password_should_be_8_characters\\n                                        </small>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                    </div>\\n                     <div class=\\\"row\\\">\\n                            <div class=\\\"col-md-12\\\">\\n                                <div class=\\\"md-form has-required\\\">\\n                                    <i class=\\\"fa fa-lock prefix\\\"></i>\\n                                    <label for=\\\"confirmPassword\\\">confirm_password*</label>\\n                                    <input type=\\\"password\\\" id=\\\"confirmPassword\\\" name=\\\"confirmPassword\\\" class=\\\"form-control\\\" #confirmPassword=\\\"ngModel\\\" [(ngModel)]=\\\"user.confirmPassword\\\" required [equalTo]=\\\"password\\\" />\\n                                    <div class=\\\"error-block\\\">\\n                                        <small *ngIf=\\\"confirmPassword.errors?.required && confirmPassword.touched\\\" class=\\\"text-danger\\\">\\n                                            confirm_password_is_required\\n                                        </small>\\n                                        <small *ngIf=\\\"(confirmPassword.errors?.equalTo && confirmPassword.touched)\\\" class=\\\"text-danger\\\">\\n                                            password_mismatch\\n                                        </small>\\n                                    </div>\\n                                </div>\\n                            </div>\\n\\n                        </div>\\n\\n                        <div class=\\\"row\\\">\\n                            <div class=\\\"col-md-6\\\">\\n                                <button class=\\\"btn btn-success signin\\\" [disabled]=\\\"!loginForm.valid\\\">{{language.getLabel('send')}}</button>\\n                            </div>\\n                        </div>\\n\\n                    </form>\\n                </div>\\n\\n\\n            </div>\\n\\n        </div>\\n        <!-- loginbox-->\\n\\n    </div>\\n</main>\\n<!--/Main layout-->\\n\\n<!-- <app-footer></app-footer> -->\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/auth/reset-password/reset-password.component.html\n// module id = 1529\n// module chunks = 4"],"sourceRoot":""}